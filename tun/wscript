#!/usr/bin/env python
# encoding: utf-8

import os
import shutil
import subprocess

APPNAME = 'tun'
VERSION = '0.1'

top = '.'
out = 'build'

def recurse_helper(ctx, name):
    if not ctx.has_dependency_path(name):
        ctx.fatal('Load a tool to find %s as system dependency' % name)
    else:
        p = ctx.dependency_path(name)
        ctx.recurse([p])

def options(opt):
    import waflib.extras.wurf_dependency_bundle as bundle
    import waflib.extras.wurf_dependency_resolve as resolve
#    import waflib.extras.wurf_configure_output

    opt.load('compiler_cxx')

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'fifi',
            git_repository = 'github.com/steinwurf/fifi.git',
            major_version = 9))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'sak',
            git_repository = 'github.com/steinwurf/sak.git',
            major_version = 10))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'boost',
            git_repository = 'github.com/steinwurf/external-boost-light.git',
            major_version = 1))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'waf-tools',
            git_repository = 'github.com/steinwurf/external-waf-tools.git',
            major_version = 2))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'gtest',
            git_repository = 'github.com/steinwurf/external-gtest.git',
            major_version = 2))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'kodo',
            git_repository = 'github.com/steinwurf/kodo.git',
            major_version = 15))

#    opt.load('wurf_dependency_resolve')
    opt.load('wurf_dependency_bundle')
    opt.load('wurf_tools')

def configure(conf):
    conf.load('compiler_cxx')

    conf.load('wurf_dependency_bundle')
    conf.load('wurf_tools')

    conf.load_external_tool('mkspec', 'wurf_cxx_mkspec_tool')
    conf.load_external_tool('runners', 'wurf_runner')
    conf.load_external_tool('install_path', 'wurf_install_path')
#    conf.load_external_tool('project_gen', 'wurf_project_generator')

    recurse_helper(conf, 'kodo')
    recurse_helper(conf, 'boost')
    recurse_helper(conf, 'gtest')
    recurse_helper(conf, 'sak')
    recurse_helper(conf, 'fifi')

def build(bld):
    recurse_helper(bld, 'boost')
    recurse_helper(bld, 'kodo')
    recurse_helper(bld, 'gtest')
    recurse_helper(bld, 'sak')
    recurse_helper(bld, 'fifi')

#    bld.cxx_flags = ['-O3', '-ggdb', '-g', '-std=c++11', '-Wall', '-Wextra', '-pedantic', '-Werror', '-pthread','-Wno-unused-local-typedefs', '-ftree-vectorizer-verbose=1']
    bld.cxx_flags = ['-O3', '-ggdb', '-g', '-std=c++11', '-Wall', '-Wextra', '-pedantic', '-Werror', '-pthread','-Wno-unused-local-typedefs']

    bld.kodo_use = ['boost_includes', 'boost_system', 'boost_thread', 'kodo_includes', 'fifi_includes', 'sak_includes', 'quit']

    quit = bld.stlib(
        features = 'cxx',
        source = ['src/quit.cpp'],
        target = 'quit',
        includes = 'src',
        cxxflags = bld.cxx_flags)

    bld.recurse('apps')
    bld.recurse('test')

